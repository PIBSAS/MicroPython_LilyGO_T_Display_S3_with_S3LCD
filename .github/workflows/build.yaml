name: T-Display-S3 + S3LCD

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 */14 * *'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IDF_CCACHE_ENABLE: 1
    steps:
    - name: Clone this repo
      uses: actions/checkout@v4.2.2
      
    - name: Clone Micropython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - id: idf_ver
      name: Read ESP-IDF and Python version from tools/ci.sh
      run: |
        source micropython/tools/ci.sh
        echo "IDF_VER=${IDF_VER}" | tee -a "$GITHUB_OUTPUT"
        echo "PYTHON_VER=${PYTHON_VER}" | tee -a "$GITHUB_OUTPUT"

    - name: Show detected versions
      run: |
        echo "ESP-IDF version: ${{ steps.idf_ver.outputs.IDF_VER }}"
        echo "Python version:  ${{ steps.idf_ver.outputs.PYTHON_VER }}"
          
    - name: Setup Python from ci.sh
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ steps.idf_ver.outputs.PYTHON_VER }}
    
    - name: Clonar s3lcd by @russhughess
      run: git clone https://github.com/russhughes/s3lcd.git

    - name: Parchear s3lcd.c para ESP-IDF v5.4.2
      run: sed -i 's/self->bus_handle.spi = NULL;/self->bus_handle.spi = 0;/' $GITHUB_WORKSPACE/s3lcd/src/s3lcd.c

    - name: Aplicar parche para errores de mp_raise_ValueError
      run: |
        sed -i 's/mp_raise_ValueError(\(.*\));/mp_raise_ValueError(MP_ERROR_TEXT(\1));/' $GITHUB_WORKSPACE/s3lcd/src/s3lcd_i80_bus.c

    - name: Copy tdt_config and config_buttons and fonts
      run: |
        cp "$GITHUB_WORKSPACE/s3lcd/examples/configs/t-display-s3/tft_config.py" "$GITHUB_WORKSPACE/s3lcd/modules/"
        cp "$GITHUB_WORKSPACE/s3lcd/examples/configs/t-display-s3/tft_buttons.py" "$GITHUB_WORKSPACE/s3lcd/modules/"
        cp "$GITHUB_WORKSPACE/s3lcd/examples/chango/chango_16.py" "$GITHUB_WORKSPACE/micropython/ports/esp32/modules/"
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
    
    - name: Cache ESP-IDF and environment
      id: cache-esp
      uses: actions/cache@v4.2.3
      with:
        path: |
          esp-idf
          ~/.espressif
        key: esp-full-${{ runner.os }}-${{ steps.idf_ver.outputs.IDF_VER }}-${{ hashFiles('micropython/tools/ci.sh') }}
        restore-keys: |
          esp-full-${{ runner.os }}-${{ steps.idf_ver.outputs.IDF_VER }}-
  
    - name: Setup ESP-IDF
      run: |
        if [ ! -d "esp-idf" ]; then
          git clone --depth 1 --branch ${{ steps.idf_ver.outputs.IDF_VER }} https://github.com/espressif/esp-idf.git
          git -C esp-idf submodule update --init --recursive --depth=1
        fi
        
        if [ ! -d "$HOME/.espressif/python_env" ]; then
          echo "Instalando entorno virtual de ESP-IDF..."
          ./esp-idf/install.sh
        fi
   
    - name: Set up environment
      run: |
        source esp-idf/export.sh
        echo "IDF_PATH=$GITHUB_WORKSPACE/esp-idf" >> $GITHUB_ENV
        idf.py --version

    - name: Copy board configuration
      run: |
        cp -r ESP32_GENERIC_S3_N16R8 micropython/ports/esp32/boards/

    - name: Copiar tabla de particiones personalizada
      run: |
        cp "$GITHUB_WORKSPACE/ESP32_GENERIC_S3_N16R8/partitions-16MiB.csv" "$GITHUB_WORKSPACE/micropython/ports/esp32/partitions-16MiB.csv"

    - name: Compilar MicroPython + S3LCD
      run: |
        source esp-idf/export.sh
        cd ${{ github.workspace }}/micropython
        make -j$(nproc) -C mpy-cross
        export IDF_TARGET=esp32s3
        cd ports/esp32/
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_S3_N16R8 \
               -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_S3_N16R8" \
               -D USER_C_MODULES="$GITHUB_WORKSPACE/s3lcd/src/micropython.cmake" \
               -D MICROPY_FROZEN_MANIFEST="$GITHUB_WORKSPACE/s3lcd/manifest.py" \
               -B build-ESP32_GENERIC_S3_N16R8 build

    
    - name: Mover binarios MicroPython + S3LCD
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/micropython.bin ./artifacts/micropython.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/bootloader/bootloader.bin ./artifacts/bootloader.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_S3_N16R8/partition_table/partition-table.bin ./artifacts/partition-table.bin || true
    
    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
    
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: Verificar existencia de los tres binarios
      run: |
        if [ ! -f ./artifacts/micropython.bin ] || [ ! -f ./artifacts/bootloader.bin ] || [ ! -f ./artifacts/partition-table.bin ]; then
          echo "Falta uno o m√°s archivos binarios necesarios, cancelando release."
          exit 1
        fi
    
    - name: GH Release
      uses: softprops/action-gh-release@v2.3.2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython for LilyGo T-Display S3 with S3LCD Driver release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          
          ## What we get here: 
          - MicroPython with S3LCD Display Driver:
            - ```micropython.bin, bootloader.bin and partition-table.bin.```

          # Instructions
            You need to have some dependencies pre-instaled in your OS:
            - Python 3
            - Pip
            - Python VENV
          
          ## Windows or Linux:
          Create Virtual Environment
          ```bash
          python -m venv esp-env
          ```
          
          ### On Windows activate Virtual Environment this way:
          ```bash
          .\esp-env\Scripts\activate
          ```
          ### On Linux activate Virtual Environment this way:
          ```bash
          source esp-env/bin/activate
          ```
          ### On Windows or Linux install esptool:
          ```bash
          pip install esptool
          ```
          
          ### Put T-Display-S3 in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          - Alternative: Use Thonny IDE, plug your T-Display-S3, on Thonny Shell type:
          ```bash
          from machine import bootloader
          ```
          Press ``Enter`` then type:
          ```bash
          bootloader()
          ```
          Press ``Enter`` then just cose Thonny and go to Terminal with Virtual Environment activate.
          
          ### Erase Flash:
          ```bash
          python -m esptool --chip esp32s3 erase-flash
          ```
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ```bash
          python -m esptool --chip esp32s3 -b 460800 --before default-reset --after no-reset write-flash --flash-mode dio --flash-size 16MB --flash-freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ```

          ### You can check from MicroPython Shell on Thonny with:
          ```bash
          help('modules')
          ```
          The modules in MicroPython.
          
          ### NOTE IN WINDOWS:
          - If you get a PowerShell Scripts Policy Execution Exception that don't let you activate the Virtual Environment:
          
           ````bash
          .\esp-env\Scripts\activate
          ````
          
          - Then open a Terminal like Administrator and type:
          
          ````bash
          Set-ExecutionPolicy Unrestricted
          ````
          - Close the Terminal now you can activate the Python Virtual Enmvironment
          
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
